)]}'
{"version":3,"sources":["artwells:accounts-guest/accounts-guest.js","artwells:accounts-guest/accounts-guest-client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mB;AACA,kD;AACA,yF;AACA,C;AACA,mD;AACA,gF;AACA,C;;;;;;;;;;;;;;;;;;;ACNA,kB;AACA,kD;AACA,wB;AACA,E;AACA,G;;AAEA,mF;AACA,oB;AACA,O;AACA,c;AACA,yB;AACA,qB;AACA,sH;AACA,mG;AACA,O;AACA,4E;AACA,iC;AACA,mB;AACA,kD;AACA,wD;AACA,gC;AACA,iF;AACA,qE;AACA,wB;AACA,gB;AACA,iC;AACA,S;AACA,O;AACA,C;;AAEA,wB;AACA,gE;AACA,kD;AACA,gC;AACA,2B;AACA,oE;AACA,wB;AACA,gE;AACA,mD;AACA,a;;AAEA,2E;AACA,8D;;AAEA,qF;AACA,2B;AACA,6D;AACA,gD;AACA,wB;AACA,2C;AACA,iB;AACA,e;AACA,W;AACA,K;AACA,C;;AAEA,0B;AACA,8B;AACA,+B;AACA,gD;AACA,sC;AACA,a;AACA,S;AACA,O;AACA,G","file":"/packages/artwells_accounts-guest.js","sourcesContent":["AccountsGuest = {};\nif (typeof AccountsGuest.forced === \"undefined\") {\n\tAccountsGuest.forced = true; /*default to making loginVisitor automatic, and on logout*/\n}\nif (typeof AccountsGuest.enabled === \"undefined\") {\n\tAccountsGuest.enabled = true; /* on 'false'  Meteor.loginVisitor() will fail */\n}\n","/*****************\n * special anonymous behavior so that visitors can\n * manipulate their work\n *\n */\n\n// If our app has a Blaze, override the {{currentUser}} helper to deal guest logins\nif (Package.blaze) {\n    /**\n     * @global\n     * @name  currentUser\n     * @isHelper true\n     * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n     * Where \"logged in\" means: The user has has authenticated (e.g. through providing credentials)\n     */\n    Package.blaze.Blaze.Template.registerHelper('currentUser', function () {\n        var user = Meteor.user();\n        if (user &&\n            typeof user.profile !== 'undefined' &&\n            typeof user.profile.guest !== 'undefined' &&\n            user.profile.guest){\n            // a guest login is not a real login where the user is authenticated.\n            // This allows the account-base \"Sign-in\" to still appear\n            return null;\n        } else {\n            return Meteor.user();\n        }\n    });\n}\n\n//no non-logged in users\n/* you might need to limit this to avoid flooding the user db */\nMeteor.loginVisitor = function (email, callback) {\n    AccountsGuest.forced = true;\n    if (!Meteor.userId()) {\n        Meteor.call('createGuest', email, function (error, result) {\n            if (error) {\n                console.log('Error in creating Guest ' + error);\n                return callback && callback(error);\n            }\n\n            /* if a simple \"true\" is returned, we are in a disabled mode */\n            if(result === true) return callback && callback();\n\n            Meteor.loginWithPassword(result.email, result.password, function(error) {\n                if(error) {\n                    console.log('Error logging in ' + error);\n                    callback && callback(error);\n                } else {\n                    callback && callback();\n                }\n            });\n        });\n    }\n}\n\nMeteor.startup(function(){\n    Deps.autorun(function () {\n        if (!Meteor.userId()) {\n            if (AccountsGuest.forced === true) {\n                Meteor.loginVisitor();\n            }\n        }\n    });\n});\n"]}